--1
SELECT DEPARTMENT_NAME, CATEGORY
FROM TB_DEPARTMENT;

--2
SELECT DEPARTMENT_NAME || '의 정원은' || CAPACITY|| '입니다'
FROM TB_DEPARTMENT;

--3.
SELECT DEPARTMENT_NO
FROM TB_DEPARTMENT
WHERE DEPARTMENT_NAME = '국어국문학과';

SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO
                        FROM TB_DEPARTMENT
                        WHERE DEPARTMENT_NAME = '국어국문학과')
AND ABSENCE_YN = 'Y'
AND SUBSTR(STUDENT_SSN,8,1)='2';

--4.
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO in ('A513079','A513090','A513091','A513110','A513119') 
ORDER BY STUDENT_NAME DESC;

--5.
SELECT DEPARTMENT_NAME,CATEGORY
FROM TB_DEPARTMENT
WHERE  CAPACITY >= '20'  AND CAPACITY <= '30'; 

--6.
select PROFESSOR_NAME
from TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

--7.
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO
                        FROM TB_DEPARTMENT
                        WHERE DEPARTMENT_NO IS NULL);
                        
--8.

SELECT CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;


--9.
SELECT CATEGORY
FROM TB_DEPARTMENT
GROUP BY CATEGORY
ORDER BY CATEGORY;

--10.
SELECT STUDENT_NO,STUDENT_NAME,STUDENT_SSN
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) = '2002' 
AND STUDENT_ADDRESS LIKE '%전주시%'
AND ABSENCE_YN = 'N';

--2-1 --DEPARTMENT_NO
SELECT *
FROM TB_CLASS; --CLASS_NO

SELECT *
FROM TB_STUDENT; --DEPARTMENT_NO

SELECT STUDENT_NO AS "학번",STUDENT_NAME AS "이름",ENTRANCE_DATE AS "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO = '002'
ORDER BY 3;


--2-2
SELECT *
FROM TB_PROFESSOR;  --PROFESSOR_NAME

SELECT PROFESSOR_NAME,PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE LENGTH(PROFESSOR_NAME) != 3; 

--2-3***
SELECT PROFESSOR_NAME ,FLOOR(FLOOR(SYSDATE-TO_DATE(SUBSTR(PROFESSOR_SSN,1,6)))/365)||'살' AS "나이"
FROM TB_PROFESSOR;

SELECT PROFESSOR_NAME,TO_DATE(SUBSTR(PROFESSOR_SSN,1,6))
FROM TB_PROFESSOR
WHERE PROFESSOR_NAME = '장남희';

--2-4
SELECT SUBSTR(PROFESSOR_NAME,2,2) AS "이름"
FROM TB_PROFESSOR;

--2-5 춘 기술대학교의 재수생 입학자를 구하려고 핚다. 어떻게 찾아낼 것인가? 이때,
--19 살에 입학하면 재수를 하지 않은 것으로 간주핚다.

SELECT *
FROM TB_STUDENT
WHERE SUBSTR(TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(REPLACE(STUDENT_SSN, '-', ''),1,6),'RRMMDD'),(12*19))),1,2) < SUBSTR(TO_CHAR(ENTRANCE_DATE),1,2);

--2-6

--2020 년 크리스마스는 무슨 요일인가?

SELECT  TO_CHAR(TO_DATE('20201225','YYYYMMDD'),'DAY')
FROM DUAL;

--2--7
/*TO_DATE('99/10/11','YY/MM/DD'), TO_DATE('49/10/11','YY/MM/DD') 
은 각각 몇 년 몇 월 몇 일을 의미핛까? 
또 TO_DATE('99/10/11','RR/MM/DD'),TO_DATE('49/10/11','RR/MM/DD') 
은 각각 몇 년 몇 월 몇 일을 의미핛까?
*/
SELECT TO_DATE('99/10/11','YY/MM/DD'), TO_DATE('49/10/11','YY/MM/DD') 
FROM DUAL;
SELECT TO_DATE('99/10/11','RR/MM/DD'),TO_DATE('49/10/11','RR/MM/DD') 
FROM DUAL;
--2099/10/11 , 2049/10/11
--1999/10/11 , 2049/10/11


--2-8
/*춘 기술대학교의 2000 년도 이후 입학자들은 학번이 A 로 시작하게 되어있다. 2000 년도
이전 학번을 받은 학생들의 학번과 이름을 보여주는 SQL 문장을 작성하시오.
*/

SELECT STUDENT_NO,STUDENT_NAME
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_NO,1,1) != 'A';


--2-9
/*
학번이 A517178 인 핚아름 학생의 학점 총 평점을 구하는 SQL 문을 작성하시오. 단,
이때 출력 화면의 헤더는 "평점" 이라고 찍히게 하고, 점수는 반올림하여 소수점 이하 핚
자리까지맊 표시핚다.
*/

SELECT  TRUNC(AVG(POINT),1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A517178';

---2-10
/*
학과별 학생수를 구하여 "학과번호", "학생수(명)" 의 형태로 헤더를 맊들어 결과값이
출력되도록 하시오.
*/

--1.학과별 그룹화

SELECT DEPARTMENT_NO 
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;
--2.그룹화된 학과들의 학과번호 , 학생수 


SELECT DEPARTMENT_NO AS "학과번호" ,COUNT(STUDENT_NAME) AS "학생수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

--2-11
--지도 교수를 배정받지 못핚 학생의 수는 몇 명 정도 되는 알아내는 SQL 문을
--작성하시오.

SELECT COUNT(*) - COUNT(COACH_PROFESSOR_NO)
FROM  TB_STUDENT;

--2-12
/*학번이 A112113 인 김고운 학생의 년도 별 평점을 구하는 SQL 문을 작성하시오. 단,
이때 출력 화면의 헤더는 "년도", "년도 별 평점" 이라고 찍히게 하고, 점수는 반올림하여
소수점 이하 핚 자리까지맊 표시한다*/

SELECT SUBSTR(TERM_NO,1,4), ROUND (AVG(POINT),1)
FROM TB_GRADE
WHERE STUDENT_NO ='A112113'
GROUP BY SUBSTR(TERM_NO,1,4)
HAVING SUBSTR(TERM_NO,1,4) IN ('2001','2002','2003','2004')
ORDER BY SUBSTR(TERM_NO,1,4);


SELECT SUBSTR(TERM_NO,1,4) AS "년도" , POINT AS "연도별 평점"
FROM TB_GRADE
GROUP BY TERM_NO
WHERE STUDENT_NO = 'A112113';

SELECT SUBSTR(TERM_NO,1,4)
FROM TB_GRADE
GROUP BY TERM_NO
WHERE STUDENT_NO = 'A112113';

SELECT SUBSTR(TERM_NO,1,4),POINT
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113';


SELECT *
FROM (SELECT SUBSTR(TERM_NO,1,4) AS "년도" , POINT 
FROM TB_GRADE
GROUP BY "년도"
WHERE STUDENT_NO = 'A112113');


SELECT SUBSTR(TERM_NO,1,4), POINT
FROM TB_GRADE;

SELECT * 
FROM (SELECT SUBSTR(TERM_NO,1,4), POINT
FROM TB_GRADE)
WHERE  STUDENT_NO = 'A112113';


--2-13
/*학과 별 휴학생 수를 파악하고자 핚다. 학과 번호와 휴학생 수를 표시하는 SQL 문장을
작성하시오.
*/

/*SELECT JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY JOB_CODE
HAVING SUM(SALARY) >= 10000000;*/


SELECT DEPARTMENT_NO , COUNT(DECODE(ABSENCE_YN,'Y','Y'))
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

SELECT *
FROM TB_STUDENT




--2-14
SELECT STUDENT_NAME,COUNT(STUDENT_NAME)
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(STUDENT_NAME) != 1
ORDER BY STUDENT_NAME;

--2-15
SELECT NVL(SUBSTR(TERM_NO,1,4),' '),NVL(SUBSTR(TERM_NO,5,2),' ') ,ROUND(AVG(POINT),1)
FROM TB_GRADE
WHERE STUDENT_NO ='A112113'
GROUP BY ROLLUP (SUBSTR(TERM_NO,1,4),SUBSTR(TERM_NO,5,2));



SELECT *
FROM TB_GRADE
WHERE STUDENT_NO ='A112113'
ORDER BY TERM_NO;


--3-1

SELECT STUDENT_NAME AS "학생이름" ,STUDENT_ADDRESS AS "주소지"
FROM TB_STUDENT
ORDER BY STUDENT_NAME;


--3-2

SELECT STUDENT_NAME,STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY STUDENT_SSN DESC;


--3-3

SELECT STUDENT_NAME AS "학생이름",STUDENT_NO AS "학번",STUDENT_ADDRESS AS "거주지주소"
FROM TB_STUDENT
WHERE STUDENT_ADDRESS LIKE '%경기도%'
INTERSECT
SELECT STUDENT_NAME AS "학생이름",STUDENT_NO AS "학번",STUDENT_ADDRESS AS "거주지주소"
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) > 1899
AND EXTRACT(YEAR FROM ENTRANCE_DATE) < 2000;

SELECT ENTRANCE_DATE
FROM TB_STUDENT;


SELECT STUDENT_ADDRESS
FROM TB_STUDENT;


--3-4
SELECT PROFESSOR_NAME,PROFESSOR_SSN
FROM TB_PROFESSOR P,TB_DEPARTMENT D
WHERE (P.DEPARTMENT_NO = D.DEPARTMENT_NO)
AND P.DEPARTMENT_NO = 005
ORDER BY PROFESSOR_SSN ;


SELECT *
FROM TB_PROFESSOR;


SELECT *-- 005 DEPARTMENT_NO
FROM TB_DEPARTMENT;

--3-5
--1. 2004년 2학기 C3118100 과목을 수강한 학생

--2 학점이 높은 학생표시 AND 학점이 같으면 학번이 낮은 학생부터 표시